services:
  postgresdb:
    image: postgres:17.1
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - '6432:5432'
    volumes:
      - pgdata2:/var/lib/postgresql/data
    networks:
      - general
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 50s
      timeout: 10s
      retries: 5

  payload:
    build:
      context: ./admin
      dockerfile: Dockerfile
    image: node:22-alpine
    ports:
      - '3000:3000'
    volumes:
      - admin:/home/node/app
      - admin/node_modules:/home/node/app/node_modules
    networks:
      - general
    working_dir: /home/node/app/
    command: sh -c "corepack enable && corepack prepare pnpm@latest --activate && pnpm install && pnpm dev"
    depends_on:
      - postgresdb
    env_file:
      - .env

volumes:
  pgdata2:

networks:
  general:
    driver: bridge

  # web:
  #   build:
  #     context: .
  #   ports:
  #     - "8881:8888"
  #   expose:
  #     - "8888"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   environment:
  #     - NODE_ENV=production
  #     - VITE_BOT_TOKEN=${VITE_BOT_TOKEN}
  #     - VITE_SITE_URL=${VITE_SITE_URL}
  #     - VITE_SETUP_SECRET=${VITE_SETUP_SECRET}
  #     - VITE_SITE_PORT=${VITE_SITE_PORT}
  #     - VITE_WS_URL=${VITE_WS_URL}
  #     - VITE_GTM_ID=${VITE_GTM_ID}
  #     - VITE_BOT_NAME=${VITE_BOT_NAME}
  #     - VITE_BOT_APP_NAME=${VITE_BOT_APP_NAME}
  #     - VITE_BUGSNAG_KEY=${VITE_BUGSNAG_KEY}
  #     - BUGSNAG_KEY_NODE=${BUGSNAG_KEY_NODE}
  #     - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
  #     - REDIS_URL=redis://${REDIS_USER}:${REDIS_PASSWORD}@redis:${REDIS_PORT}
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8888/health || exit 1"]
  #     interval: 60s
  #     timeout: 10s
  #     retries: 3

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# FROM node:20-alpine AS builder
# WORKDIR /app

# COPY pnpm-lock.yaml package.json ./
# RUN npm install -g pnpm
# RUN pnpm install --prod --frozen-lockfile

# COPY . .
# RUN pnpm run build
# RUN pnpm run build:server

# FROM node:20-alpine
# WORKDIR /app

# COPY --from=builder /app/dist ./dist
# COPY --from=builder /app/index.mjs ./

# EXPOSE 8888

# CMD ["node", "index.mjs"]


  # redis:
  #   image: redis:7.2.7-alpine3.21
  #   ports:
  #     - "6377:6379"
  #   networks:
  #     - general
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 50s
  #     timeout: 10s
  #     retries: 5