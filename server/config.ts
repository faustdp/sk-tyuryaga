import crypto from 'node:crypto'

import Bugsnag from '@bugsnag/js'
import BugsnagPluginExpress from '@bugsnag/plugin-express'
import type { ErrorRequestHandler, RequestHandler, Response } from 'express'
import { Bot } from 'grammy'

export const sitePort = Number(process.env.PUBLIC_SITE_PORT) || 8828
export const apiPaths = {
  apiPath: '/api',
  botPath: '/bot',
  mePath: '/me',
  healthPath: '/health',
  endTimePath: '/end-time',
  farmCigsPath: '/farm-cigs',
  addBonusPath: '/add-bonus',
  claimFriendsPath: '/claim-friends',
  selectImagePath: '/select-image',
  getFriendsPath: '/friends-list',
  setAddressPath: '/set-address',
  checkSubscriptionPath: '/check-subscription',
  checkCodePath: '/check-code',
  taskStatusPath: '/task-status',
  ssePath: '/events/:id',
}
export const token = process.env.BOT_TOKEN!
export const secretToken = process.env.SETUP_SECRET
export const siteUrl = process.env.SITE_URL!
// export const redisUrl =
//   process.env.REDIS_URL ||
//   `redis://${process.env.REDIS_USER}:${process.env.REDIS_PASSWORD}@${process.env.REDIS_HOST}:${process.env.REDIS_PORT}`
export const dbUrl = `postgres://${process.env.POSTGRES_USER}:${process.env.POSTGRES_PASSWORD}@${process.env.POSTGRES_HOST}:${process.env.POSTGRES_PORT}/${process.env.POSTGRES_DB}`
export const serverId = crypto.randomBytes(5).toString('hex')
export const sseClients = new Map<string, { [key: string]: Response }>()
export const w8 = async (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))
export const sources = {
  self: "'self'",
  tg: 'https://telegram.org',
  tag: 'https://www.googletagmanager.com',
  anal: 'https://www.google-analytics.com',
  analeu: 'https://region1.google-analytics.com',
  inline: "'unsafe-inline'",
  data: 'data:',
  bug1: 'https://sessions.bugsnag.com',
  bug2: 'https://otlp.bugsnag.com',
  bug3: 'https://notify.bugsnag.com',
  https: 'https:',
}

Bugsnag.start({
  apiKey: process.env.BUGSNAG_KEY_NODE || '',
  plugins: [BugsnagPluginExpress],
  autoTrackSessions: false,
  logger: null,
})

interface BugsnagPluginExpressResult {
  errorHandler: ErrorRequestHandler
  requestHandler: RequestHandler
  runInContext: RequestHandler
}

const bugSnagMiddleware = Bugsnag.getPlugin('express') as BugsnagPluginExpressResult

export { Bugsnag, bugSnagMiddleware }

export const bot = new Bot(token)

export async function setupBot() {
  if (!token) {
    console.error('Bot token not found in environment variables')
    process.exit(1)
  }

  bot.on('message', async (ctx) => {
    console.log('config98', ctx.msg.text, ctx.update.message.from)
    try {
      handleBotStart(ctx.update.message.from.id)
    } catch (error) {
      console.log(error)
    }
  })

  if (!bot.isRunning()) {
    bot.start()
  }
  // try {
  //   // await bot.telegram.deleteWebhook({ drop_pending_updates: true })
  //   const webhook = await bot.telegram.getWebhookInfo()
  //   if (webhook.url !== '' && webhook.url === `${siteUrl}${apiPath}${botPath}`) return

  //   await bot.launch({
  //     webhook: {
  //       domain: siteUrl,
  //       path: `${apiPath}${botPath}`,
  //       secretToken,
  //     },
  //   })
  // } catch (err) {
  //   console.error('Error setting Telegram Bot WebHook:', err)
  // }
}

// export function escapeMarkdown(text: string) {
//   return text.replace(/([.[\]()~`>#+\-=|{}!?\\])/g, '\\$1')
// }

export async function handleBotStart(chatId: string | number, _firstName?: string) {
  //   const photoUrl = 'https://imgur.com/a/HYJ1vDX'
  //   const inlineKeyboard = [
  //     [
  //       {
  //         text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É',
  //         web_app: {
  //           url: siteUrl,
  //         },
  //       },
  //     ],
  //     [
  //       {
  //         text: '–ó–∞–ª–µ—Ç–∞–π –≤ —Ö–∞—Ç—É',
  //         url: 'https://t.me/PrisonTONx',
  //       },
  //     ],
  //   ]
  //   let caption = escapeMarkdown(
  //     `–≠–π, –±—Ä–∞—Ç–æ–∫! –¢—ã –≤ "–¢—é—Ä—è–≥–µ", –∞ —Ç—É—Ç –º—ã –ø–æ –ø–æ–Ω—è—Ç–∏—è–º –∂–∏–≤–µ–º. –î–µ–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –º–∞–ª—è–≤–æ–π –∏ –ø–æ–¥–Ω–∏–º–∞–π —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å. –°–∫–æ—Ä–æ —Ç—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π –∫–∏–ø–∏—à —Å NFT –∏ –ø—Ä–æ—á–µ–π –¥–µ–ª—é–≥–æ–π. –ù–µ —Ç—É–ø–∏, –Ω–∞—á–∏–Ω–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è!`,
  //   )

  //   if (firstName) {
  //     caption = caption.replace('–±—Ä–∞—Ç–æ–∫', `–±—Ä–∞—Ç–æ–∫, ${firstName.replace(/([_.!{}|\-()+~*>[\]#=`])/g, '\\$1')}`)
  //   }

  //   return bot.telegram.sendPhoto(chatId, photoUrl, {
  //     caption,
  //     reply_markup: { inline_keyboard: inlineKeyboard },
  //     parse_mode: 'MarkdownV2',
  //   })
  return bot.api.sendMessage(chatId, 'Hi') //5416188878 and 721149485 undelivered
}

// export async function handleLevelUp(chatId: number, level: number) {
//   const msg =
//     level === 10
//       ? `–í–æ—Ç –∏ –ø–æ –º–∞—Å—Ç–∏ —Ç–µ–±—è –∫–æ—Ä–æ–Ω–æ–≤–∞–ª–∏, –±—Ä–∞—Ç–∞–Ω! üëë\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –ø–æ–ª–Ω–æ–º –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–µ, –¥–µ—Ä–∂–∏—Å—å —Ä–æ–≤–Ω–æ. –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚Äî –∂–¥–∏ –¥–≤–∏–∂—É—Ö—É, —Å–≤–æ–∏ –ø—Ä–∏–∫–æ–ª—ã —Å–∫–æ—Ä–æ –ø–æ–¥—ä–µ–¥—É—Ç. –¢—ã —Å–¥–µ–ª–∞–ª —Å–≤–æ—ë –¥–µ–ª–æ, —Ç–µ–ø–µ—Ä—å –≤—Å–µ –Ω–∞ —Ç–µ–±—è —Å–º–æ—Ç—Ä—è—Ç.üñ§\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≥–Ω—É—Ç—å —Å–≤–æ—é –ª–∏–Ω–∏—é, –∂–∏–∑–Ω—å –ø–æ –ø–æ–Ω—è—Ç–∏—è–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.`
//       : `–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ—Å—Ç–∏–≥ ${level}-–≥–æ —É—Ä–æ–≤–Ω—è!\n\n–ö–µ–Ω—Ç–æ–≤ –ø–æ–¥—Ç—è–Ω—É–ª - —É–≤–∞–∂–µ–Ω–∏–µ –≤ —Ö–∞—Ç–µ –ø–æ–≤—ã—Å–∏–ª.\n–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –≤–æ—Ä–æ–≤—Å–∫–æ–º—É. –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –ø–æ —Ä–æ–≤–Ω–µ–π –¥–æ—Ä–æ–≥–µ!\n–ò –∫–µ–Ω—Ç–æ–≤ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ - –∫—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∞–ª, –æ–Ω–∏ —Å —Ç–æ–±–æ–π –±—É–¥—É—Ç –¥–æ —Ç–∞–ª–æ–≥–æ!`
//   return bot.telegram.sendMessage(chatId, msg)
// }
